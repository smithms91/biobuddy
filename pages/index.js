import Head from 'next/head'
import styles from '@/styles/Home.module.css'
//MUI Stuff
import FormControl from '@mui/material/FormControl';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import Select from '@mui/material/Select';
import TextField from '@mui/material/TextField';
import TwitterIcon from '@mui/icons-material/Twitter';
import GitHubIcon from '@mui/icons-material/GitHub';
import EastIcon from '@mui/icons-material/East';
import Button from '@mui/material/Button';
import Snackbar from '@mui/material/Snackbar';
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';

//DB
import { connectDb, models } from "../lib/db"
const mongoose = require('mongoose');

// import PocketBase from 'pocketbase';

import { useState } from 'react';

export default function Home(props) {
  const [biosCreated, setBiosCreated] = useState(props.biosCreated);
  const [bio, setBio] = useState('');
  const [vibe, setVibe] = useState('funny');
  const [AIResponse, setAIResponse] = useState('')
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);

  const handleClick = () => {
    setOpen(true);
  };

  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpen(false);
  };

  const prompt =
    vibe === 'funny'
      ? `Generate 2 funny twitter bios with no hashtags and clearly labeled "1." and "2.". Make sure each generated bio is at max 20 words and base it on this context: ${bio}${bio.slice(-1) === "." ? "" : "."}`
      : `Generate 2 ${vibe} twitter bios with no hashtags and clearly labeled "1." and "2.". Make sure each generated bio is at max 20 words and base it on this context: ${bio}${bio.slice(-1) === "." ? "" : "."}`

  const handleOpenAIResponse = async (e) => {
    e.preventDefault();
    setAIResponse('');
    setLoading(true);
    let response = await fetch('/api/openai', {
      method: 'POST',
      headers: {
        'Content-Type': 'Application/JSON'
      },
      body: JSON.stringify(prompt)
    })

    try {
      let newResponse = await response.json()
      setAIResponse(newResponse.choices[0].text);
      console.log(AIResponse)
      setLoading(false);
    } catch (error) {
      console.log(error)
    }
  }

  const handleBioAPI = async () => {

    let response = await fetch('/api/hello', {
      method: 'POST',
      headers: {
        'Content-Type': 'Application/JSON'
      },
      body: 1
    })

    try {
      let newResponse = await response.json()
      setBiosCreated(newResponse + 1)
    } catch (error) {
      console.log(error)
    }
  }

  const action = (
    <IconButton
      size="small"
      aria-label="close"
      color="inherit"
      onClick={handleClose}
    >
      <CloseIcon fontSize="small" />
    </IconButton>
  );

  return (
    <>
      <Head>
        <title>Bio Buddy | Generate your next Twitter bio in seconds</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main} style={AIResponse !== '' ? { 'marginBottom': '5rem' } : { 'marginBottom': '0rem' }}>
        <button className={styles.github_button}><GitHubIcon width={30} height={30} /><a href="https://github.com/smithms91/biobuddy" target='_blank'><span>Star on GitHub</span></a></button>
        <h1>Generate your next Twitter bio in seconds</h1>
        <p>{biosCreated} bios created so far.</p>
        <div className={styles.content_box}>
          <div className={styles.info_container}>
            <span>1</span>
            <h5>Copy your current bio (or write a few sentences about yourself).</h5>
          </div>
          <TextField onChange={(e) => setBio(e.target.value)} InputLabelProps={{ style: { color: "rgba(0,0,0,.5)" } }} fullWidth className={styles.textbox} id="outlined-basic" label="Tell us about yourself" variant="outlined" multiline rows={4} />
          <div className={styles.info_container2}>
            <span>2</span>
            <h5>Select your vibe.</h5>
          </div>
          <FormControl>
            <InputLabel id="demo-simple-select-helper-label">Vibe</InputLabel>
            <Select style={{ 'color': 'rgba(0,0,0,.5)' }} className={styles.dropdown}
              labelId="demo-simple-select-helper-label"
              id="demo-simple-select-helper"
              value={vibe}
              label="Vibe"
              onChange={(e) => setVibe(e.target.value)}
            >
              <MenuItem style={{ 'color': 'rgba(0,0,0,.5)' }} value={'funny'}>Funny</MenuItem>
              <MenuItem style={{ 'color': 'rgba(0,0,0,.5)' }} value={'professional'}>Professional</MenuItem>
              <MenuItem style={{ 'color': 'rgba(0,0,0,.5)' }} value={'general'}>General</MenuItem>
            </Select>
          </FormControl>
          {/* <button className={styles.button}>Generate your bio.</button> */}
        </div>
        <button className={styles.response_button} onClick={(e) => { handleBioAPI(); handleOpenAIResponse(e); }}>Generate your bio. <EastIcon /></button>
        <div className={styles.response_box}>
          {AIResponse !== '' && <h1 style={{ 'fontSize': '1.5rem', 'marginTop': '-1rem' }}>Your Generated Bios</h1>}
          {AIResponse.substring(AIResponse.indexOf("1") + 3).split("2.").map((singleResponse) => {
            return (
              <div onClick={(e) => {
                navigator.clipboard.writeText(singleResponse);
                handleClick()
              }}>
                {loading && <p>loading</p>}
                {AIResponse !== '' && <p className={styles.single_response}>{singleResponse}</p>}
                {/* {!loading ? <p>{singleResponse}</p> : ""} */}
              </div>
            )
          })
          }
        </div>
        <div className={styles.footer_box}>
          <h5>Powered by <strong>OpenAI</strong> and <strong>Vercel Edge Functions</strong></h5>
          <ul style={{ 'margin': '.5rem 0 .7rem 0' }}>
            <li style={{ 'marginRight': '1rem' }}><TwitterIcon /></li>
            <li><GitHubIcon /></li>
          </ul>
        </div>
      </main>

      <Snackbar
        open={open}
        autoHideDuration={6000}
        onClose={handleClose}
        message="Bio has been copied!"
        action={action}
      />
    </>
  )
}


export async function getServerSideProps(context) {

  // const pb = new PocketBase('http://127.0.0.1:8090')
  // const authData = await pb.admins.authWithPassword(process.env.DB_USERNAME, process.env.DB_PASSWORD);
  // const likes = await pb.collection('likes').getOne(process.env.DB_TABLE_ID);
  // let finalData = JSON.parse(JSON.stringify(likes));
  mongoose.set("strictQuery", false);
  connectDb();
  const currentBiosCreated = await models.Bio.findOne();

  return {
    props: { biosCreated: currentBiosCreated.biosCreated } // will be passed to the page component as props
  }
}